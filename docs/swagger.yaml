definitions:
  handler.CodeSnippetForm:
    properties:
      is_archived:
        type: boolean
      is_draft:
        type: boolean
      is_private:
        type: boolean
      title:
        type: string
      user_id:
        type: string
    type: object
  handler.ProgramLanguageForm:
    properties:
      name:
        type: string
    type: object
  handler.User:
    properties:
      password:
        type: string
      username:
        example: johndoe
        type: string
    type: object
  model.CodeSnippet:
    description: CodeSnippet is the model representing a code snippet in the system.
    properties:
      codeSnippetID:
        type: string
      codeSnippetVersions:
        items:
          $ref: '#/definitions/model.CodeSnippetVersion'
        type: array
      createdAt:
        type: string
      isArchived:
        type: boolean
      isDraft:
        type: boolean
      isPrivate:
        type: boolean
      title:
        type: string
      updatedAt:
        type: string
      user:
        $ref: '#/definitions/model.User'
      userID:
        type: string
    type: object
  model.CodeSnippetRating:
    description: CodeSnippetRating is the model representing a rating for a code snippet.
    properties:
      codeSnippetRatingID:
        type: string
      codeSnippetVersionID:
        type: string
      createdAt:
        type: string
      rating:
        type: integer
      updatedAt:
        type: string
      user:
        $ref: '#/definitions/model.User'
      userID:
        type: string
    type: object
  model.CodeSnippetVersion:
    description: CodeSnippetVersion is the model representing a code snippet version
      of the code snippet in the system.
    properties:
      codeSnippetID:
        type: string
      codeSnippetRatings:
        items:
          $ref: '#/definitions/model.CodeSnippetRating'
        type: array
      codeSnippetVersionID:
        type: string
      createdAt:
        type: string
      programLanguage:
        $ref: '#/definitions/model.ProgramLanguage'
      programLanguageID:
        type: string
      reviewComments:
        items:
          $ref: '#/definitions/model.ReviewComment'
        type: array
      text:
        type: string
      updatedAt:
        type: string
    type: object
  model.Notification:
    description: Notification is a model for representing notifications for particular
      user in the system.
    properties:
      createdAt:
        type: string
      notificationID:
        type: string
      notificationType:
        type: string
      text:
        type: string
      user:
        $ref: '#/definitions/model.User'
      userID:
        type: string
    type: object
  model.ProgramLanguage:
    description: ProgramLanguage is the model representing a programming language
      in the system.
    properties:
      name:
        type: string
      programLanguageID:
        type: string
    type: object
  model.ReviewComment:
    description: ReviewComment is the model representing a comment on a code snippet.
    properties:
      codeSnippetVersion:
        $ref: '#/definitions/model.CodeSnippetVersion'
      codeSnippetVersionID:
        type: string
      commentID:
        type: string
      createdAt:
        type: string
      isGenerated:
        type: boolean
      line:
        type: integer
      replyComment:
        $ref: '#/definitions/model.ReviewComment'
      replyCommentID:
        type: string
      text:
        type: string
      updatedAt:
        type: string
      user:
        $ref: '#/definitions/model.User'
      userID:
        type: string
    type: object
  model.User:
    description: User is the model representing a user in the system.
    properties:
      createdAt:
        type: string
      isActive:
        type: boolean
      password:
        type: string
      updatedAt:
        type: string
      userID:
        type: string
      username:
        example: johndoe
        type: string
    type: object
info:
  contact: {}
paths:
  /api/v1/code_snippet/:
    get:
      consumes:
      - application/json
      description: Get all code snippets
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.CodeSnippet'
            type: array
      summary: Get all code snippets
      tags:
      - Code Snippets
    post:
      consumes:
      - application/json
      description: Create a code snippet
      parameters:
      - description: Code Snippet information to create
        in: body
        name: code_snippet
        required: true
        schema:
          $ref: '#/definitions/handler.CodeSnippetForm'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/model.CodeSnippet'
      summary: Create a code snippet
      tags:
      - Code Snippets
  /api/v1/code_snippet/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a code snippet by ID
      parameters:
      - description: Code Snippet ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.CodeSnippet'
      summary: Delete a code snippet
      tags:
      - Code Snippets
    get:
      consumes:
      - application/json
      description: Get a single code snippet by ID
      parameters:
      - description: Code Snippet ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.CodeSnippet'
      summary: Get a single code snippet
      tags:
      - Code Snippets
  /api/v1/code_snippet_version/:
    post:
      consumes:
      - application/json
      description: Create a code snippet version
      parameters:
      - description: Code Snippet information to create
        in: body
        name: code_snippet
        required: true
        schema:
          $ref: '#/definitions/model.CodeSnippetVersion'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/model.CodeSnippetVersion'
      summary: Create a code snippet version
      tags:
      - Code Snippets Versions
  /api/v1/login:
    post:
      consumes:
      - application/json
      description: login a user by username and password
      parameters:
      - description: Login credentials
        in: body
        name: credentials
        required: true
        schema:
          $ref: '#/definitions/handler.User'
      produces:
      - application/json
      responses:
        "200":
          description: login successful
          schema:
            type: string
        "401":
          description: invalid credentials
          schema:
            type: string
      summary: User login
      tags:
      - users
  /api/v1/notifications/{id}:
    get:
      consumes:
      - application/json
      description: Retrieve all notifications for a specific user
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.Notification'
            type: array
      summary: Get user notifications
      tags:
      - Notifications
  /api/v1/program_language/:
    get:
      consumes:
      - application/json
      description: Get all program languages
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.ProgramLanguage'
            type: array
      summary: Get all program languages
      tags:
      - Program Languages
    post:
      consumes:
      - application/json
      description: Create a program language
      parameters:
      - description: Name of the program language
        in: body
        name: name
        required: true
        schema:
          $ref: '#/definitions/handler.ProgramLanguageForm'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/model.ProgramLanguage'
      summary: Create a program language
      tags:
      - Program Languages
  /api/v1/register/:
    post:
      consumes:
      - application/json
      description: create a new user with the provided information
      parameters:
      - description: User to create
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/handler.User'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/model.User'
      summary: Create a new user
      tags:
      - users
  /api/v1/review_comment/:
    post:
      consumes:
      - application/json
      description: Adds a new review comment to the database.
      parameters:
      - description: Review comment information to create
        in: body
        name: review_comment
        required: true
        schema:
          $ref: '#/definitions/model.ReviewComment'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/model.ReviewComment'
      summary: Create a review comment
      tags:
      - Review Comments
  /api/v1/user/{id}:
    delete:
      consumes:
      - application/json
      description: delete a user by ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: User deleted
      summary: Delete a user
      tags:
      - users
    get:
      consumes:
      - application/json
      description: get details of user by ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.User'
      summary: Get single user
      tags:
      - users
    put:
      consumes:
      - application/json
      description: update user's information by ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      - description: User information to update
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/handler.User'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.User'
      summary: Update an existing user
      tags:
      - users
  /api/v1/user_code_snippets/{user_id}:
    get:
      consumes:
      - application/json
      description: Retrieve all code snippets created by a specific user
      parameters:
      - description: User ID
        in: path
        name: user_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.CodeSnippet'
            type: array
      summary: Get user's code snippets
      tags:
      - User Code Snippets
swagger: "2.0"
